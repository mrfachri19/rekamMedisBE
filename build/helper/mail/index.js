const nodemailer = require("nodemailer");

const hbs = require("nodemailer-express-handlebars");

const path = require("path");

require("dotenv").config();

const sendMail = data => new Promise((resolve, reject) => {
  const transporter = nodemailer.createTransport({
    host: "smtp.gmail.com",
    port: 587,
    secure: false,
    auth: {
      user: process.env.EMAIL_USER,
      pass: process.env.EMAIL_PASSWORD
    }
  });
  transporter.use("compile", hbs({
    viewEngine: {
      extName: ".html",
      partialsDir: path.resolve("./src/templates/email"),
      defaultLayout: false
    },
    viewPath: path.resolve("./src/templates/email"),
    extName: ".html"
  }));
  const mailOptions = {
    from: `"Tickitz Movie" <exampleemail581@gmail.com>`,
    to: data.to,
    subject: data.subject,
    template: data.template,
    context: data.data
  }; // if (data.attachment) {
  //   if (data.attachment.length > 0) {
  //     mailOptions.attachment = data.attachment;
  //   }
  // }

  transporter.sendMail(mailOptions, (err, info) => {
    if (err) {
      reject(err);
    } else {
      resolve(info.response);
    }
  });
});

module.exports = sendMail;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJub2RlbWFpbGVyIiwicmVxdWlyZSIsImhicyIsInBhdGgiLCJjb25maWciLCJzZW5kTWFpbCIsImRhdGEiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInRyYW5zcG9ydGVyIiwiY3JlYXRlVHJhbnNwb3J0IiwiaG9zdCIsInBvcnQiLCJzZWN1cmUiLCJhdXRoIiwidXNlciIsInByb2Nlc3MiLCJlbnYiLCJFTUFJTF9VU0VSIiwicGFzcyIsIkVNQUlMX1BBU1NXT1JEIiwidXNlIiwidmlld0VuZ2luZSIsImV4dE5hbWUiLCJwYXJ0aWFsc0RpciIsImRlZmF1bHRMYXlvdXQiLCJ2aWV3UGF0aCIsIm1haWxPcHRpb25zIiwiZnJvbSIsInRvIiwic3ViamVjdCIsInRlbXBsYXRlIiwiY29udGV4dCIsImVyciIsImluZm8iLCJyZXNwb25zZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvaGVscGVyL21haWwvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3Qgbm9kZW1haWxlciA9IHJlcXVpcmUoXCJub2RlbWFpbGVyXCIpO1xuY29uc3QgaGJzID0gcmVxdWlyZShcIm5vZGVtYWlsZXItZXhwcmVzcy1oYW5kbGViYXJzXCIpO1xuY29uc3QgcGF0aCA9IHJlcXVpcmUoXCJwYXRoXCIpO1xucmVxdWlyZShcImRvdGVudlwiKS5jb25maWcoKTtcblxuY29uc3Qgc2VuZE1haWwgPSAoZGF0YSkgPT5cbiAgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIGNvbnN0IHRyYW5zcG9ydGVyID0gbm9kZW1haWxlci5jcmVhdGVUcmFuc3BvcnQoe1xuICAgICAgaG9zdDogXCJzbXRwLmdtYWlsLmNvbVwiLFxuICAgICAgcG9ydDogNTg3LFxuICAgICAgc2VjdXJlOiBmYWxzZSxcbiAgICAgIGF1dGg6IHtcbiAgICAgICAgdXNlcjogcHJvY2Vzcy5lbnYuRU1BSUxfVVNFUixcbiAgICAgICAgcGFzczogcHJvY2Vzcy5lbnYuRU1BSUxfUEFTU1dPUkQsXG4gICAgICB9LFxuICAgIH0pO1xuXG4gICAgdHJhbnNwb3J0ZXIudXNlKFxuICAgICAgXCJjb21waWxlXCIsXG4gICAgICBoYnMoe1xuICAgICAgICB2aWV3RW5naW5lOiB7XG4gICAgICAgICAgZXh0TmFtZTogXCIuaHRtbFwiLFxuICAgICAgICAgIHBhcnRpYWxzRGlyOiBwYXRoLnJlc29sdmUoXCIuL3NyYy90ZW1wbGF0ZXMvZW1haWxcIiksXG4gICAgICAgICAgZGVmYXVsdExheW91dDogZmFsc2UsXG4gICAgICAgIH0sXG4gICAgICAgIHZpZXdQYXRoOiBwYXRoLnJlc29sdmUoXCIuL3NyYy90ZW1wbGF0ZXMvZW1haWxcIiksXG4gICAgICAgIGV4dE5hbWU6IFwiLmh0bWxcIixcbiAgICAgIH0pXG4gICAgKTtcblxuICAgIGNvbnN0IG1haWxPcHRpb25zID0ge1xuICAgICAgZnJvbTogYFwiVGlja2l0eiBNb3ZpZVwiIDxleGFtcGxlZW1haWw1ODFAZ21haWwuY29tPmAsXG4gICAgICB0bzogZGF0YS50byxcbiAgICAgIHN1YmplY3Q6IGRhdGEuc3ViamVjdCxcbiAgICAgIHRlbXBsYXRlOiBkYXRhLnRlbXBsYXRlLFxuICAgICAgY29udGV4dDogZGF0YS5kYXRhLFxuICAgIH07XG5cbiAgICAvLyBpZiAoZGF0YS5hdHRhY2htZW50KSB7XG4gICAgLy8gICBpZiAoZGF0YS5hdHRhY2htZW50Lmxlbmd0aCA+IDApIHtcbiAgICAvLyAgICAgbWFpbE9wdGlvbnMuYXR0YWNobWVudCA9IGRhdGEuYXR0YWNobWVudDtcbiAgICAvLyAgIH1cbiAgICAvLyB9XG5cbiAgICB0cmFuc3BvcnRlci5zZW5kTWFpbChtYWlsT3B0aW9ucywgKGVyciwgaW5mbykgPT4ge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc29sdmUoaW5mby5yZXNwb25zZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHNlbmRNYWlsO1xuIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxVQUFVLEdBQUdDLE9BQU8sQ0FBQyxZQUFELENBQTFCOztBQUNBLE1BQU1DLEdBQUcsR0FBR0QsT0FBTyxDQUFDLCtCQUFELENBQW5COztBQUNBLE1BQU1FLElBQUksR0FBR0YsT0FBTyxDQUFDLE1BQUQsQ0FBcEI7O0FBQ0FBLE9BQU8sQ0FBQyxRQUFELENBQVAsQ0FBa0JHLE1BQWxCOztBQUVBLE1BQU1DLFFBQVEsR0FBSUMsSUFBRCxJQUNmLElBQUlDLE9BQUosQ0FBWSxDQUFDQyxPQUFELEVBQVVDLE1BQVYsS0FBcUI7RUFDL0IsTUFBTUMsV0FBVyxHQUFHVixVQUFVLENBQUNXLGVBQVgsQ0FBMkI7SUFDN0NDLElBQUksRUFBRSxnQkFEdUM7SUFFN0NDLElBQUksRUFBRSxHQUZ1QztJQUc3Q0MsTUFBTSxFQUFFLEtBSHFDO0lBSTdDQyxJQUFJLEVBQUU7TUFDSkMsSUFBSSxFQUFFQyxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsVUFEZDtNQUVKQyxJQUFJLEVBQUVILE9BQU8sQ0FBQ0MsR0FBUixDQUFZRztJQUZkO0VBSnVDLENBQTNCLENBQXBCO0VBVUFYLFdBQVcsQ0FBQ1ksR0FBWixDQUNFLFNBREYsRUFFRXBCLEdBQUcsQ0FBQztJQUNGcUIsVUFBVSxFQUFFO01BQ1ZDLE9BQU8sRUFBRSxPQURDO01BRVZDLFdBQVcsRUFBRXRCLElBQUksQ0FBQ0ssT0FBTCxDQUFhLHVCQUFiLENBRkg7TUFHVmtCLGFBQWEsRUFBRTtJQUhMLENBRFY7SUFNRkMsUUFBUSxFQUFFeEIsSUFBSSxDQUFDSyxPQUFMLENBQWEsdUJBQWIsQ0FOUjtJQU9GZ0IsT0FBTyxFQUFFO0VBUFAsQ0FBRCxDQUZMO0VBYUEsTUFBTUksV0FBVyxHQUFHO0lBQ2xCQyxJQUFJLEVBQUcsNkNBRFc7SUFFbEJDLEVBQUUsRUFBRXhCLElBQUksQ0FBQ3dCLEVBRlM7SUFHbEJDLE9BQU8sRUFBRXpCLElBQUksQ0FBQ3lCLE9BSEk7SUFJbEJDLFFBQVEsRUFBRTFCLElBQUksQ0FBQzBCLFFBSkc7SUFLbEJDLE9BQU8sRUFBRTNCLElBQUksQ0FBQ0E7RUFMSSxDQUFwQixDQXhCK0IsQ0FnQy9CO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7O0VBRUFJLFdBQVcsQ0FBQ0wsUUFBWixDQUFxQnVCLFdBQXJCLEVBQWtDLENBQUNNLEdBQUQsRUFBTUMsSUFBTixLQUFlO0lBQy9DLElBQUlELEdBQUosRUFBUztNQUNQekIsTUFBTSxDQUFDeUIsR0FBRCxDQUFOO0lBQ0QsQ0FGRCxNQUVPO01BQ0wxQixPQUFPLENBQUMyQixJQUFJLENBQUNDLFFBQU4sQ0FBUDtJQUNEO0VBQ0YsQ0FORDtBQU9ELENBN0NELENBREY7O0FBZ0RBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUJqQyxRQUFqQiJ9