const connection = require("../../config/mysql");

module.exports = {
  getAllPreception: (limit, offset, search, sort) => new Promise((resolve, reject) => {
    connection.query(`SELECT * FROM data_preception WHERE id_pasien LIKE '%${search}%' ORDER BY ${sort} LIMIT ? OFFSET ?`, [limit, offset], (err, result) => {
      if (!err) {
        resolve(result);
      } else {
        reject(new Error(`SQL : ${err.sqlMessage}`));
      }
    });
  }),
  getCountPreception: search => new Promise((resolve, reject) => {
    connection.query(`SELECT COUNT(*) AS total FROM data_preception WHERE nama_pasien LIKE '%${search}%'`, (err, result) => {
      if (!err) {
        resolve(result[0].total);
      } else {
        reject(new Error(`SQL : ${err.sqlMessage}`));
      }
    });
  }),
  postPreception: data => new Promise((resolve, reject) => {
    const query = connection.query("INSERT INTO data_preception SET ?", data, (error, result) => {
      if (!error) {
        const newResult = {
          id: result.insertId,
          ...data
        };
        resolve(newResult);
      } else {
        reject(new Error(`SQL : ${error.sqlMessage}`));
      }
    }); // eslint-disable-next-line no-console

    console.log(query.sql);
  }),
  getExportPdfByIdRekammedis: id => new Promise((resolve, reject) => {
    connection.query("SELECT * FROM data_preception WHERE id = ?", id, (error, results) => {
      if (!error) {
        resolve(results);
      } else {
        reject(new Error(`Message : ${error.message}`));
      }
    });
  })
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb25uZWN0aW9uIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJnZXRBbGxQcmVjZXB0aW9uIiwibGltaXQiLCJvZmZzZXQiLCJzZWFyY2giLCJzb3J0IiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJxdWVyeSIsImVyciIsInJlc3VsdCIsIkVycm9yIiwic3FsTWVzc2FnZSIsImdldENvdW50UHJlY2VwdGlvbiIsInRvdGFsIiwicG9zdFByZWNlcHRpb24iLCJkYXRhIiwiZXJyb3IiLCJuZXdSZXN1bHQiLCJpZCIsImluc2VydElkIiwiY29uc29sZSIsImxvZyIsInNxbCIsImdldEV4cG9ydFBkZkJ5SWRSZWthbW1lZGlzIiwicmVzdWx0cyIsIm1lc3NhZ2UiXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbW9kdWxlcy9wcmVjZXB0aW9uL3ByZWNlcHRpb25Nb2RlbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBjb25uZWN0aW9uID0gcmVxdWlyZShcIi4uLy4uL2NvbmZpZy9teXNxbFwiKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldEFsbFByZWNlcHRpb246IChsaW1pdCwgb2Zmc2V0LCBzZWFyY2gsIHNvcnQpID0+XG4gICAgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgY29ubmVjdGlvbi5xdWVyeShcbiAgICAgICAgYFNFTEVDVCAqIEZST00gZGF0YV9wcmVjZXB0aW9uIFdIRVJFIGlkX3Bhc2llbiBMSUtFICclJHtzZWFyY2h9JScgT1JERVIgQlkgJHtzb3J0fSBMSU1JVCA/IE9GRlNFVCA/YCxcbiAgICAgICAgW2xpbWl0LCBvZmZzZXRdLFxuICAgICAgICAoZXJyLCByZXN1bHQpID0+IHtcbiAgICAgICAgICBpZiAoIWVycikge1xuICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZWplY3QobmV3IEVycm9yKGBTUUwgOiAke2Vyci5zcWxNZXNzYWdlfWApKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfSksXG5cbiAgICBnZXRDb3VudFByZWNlcHRpb246IChzZWFyY2gpID0+XG4gICAgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgY29ubmVjdGlvbi5xdWVyeShcbiAgICAgICAgYFNFTEVDVCBDT1VOVCgqKSBBUyB0b3RhbCBGUk9NIGRhdGFfcHJlY2VwdGlvbiBXSEVSRSBuYW1hX3Bhc2llbiBMSUtFICclJHtzZWFyY2h9JSdgLFxuICAgICAgICAoZXJyLCByZXN1bHQpID0+IHtcbiAgICAgICAgICBpZiAoIWVycikge1xuICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHRbMF0udG90YWwpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZWplY3QobmV3IEVycm9yKGBTUUwgOiAke2Vyci5zcWxNZXNzYWdlfWApKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfSksXG5cbiAgICBwb3N0UHJlY2VwdGlvbjogKGRhdGEpID0+XG4gICAgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgY29uc3QgcXVlcnkgPSBjb25uZWN0aW9uLnF1ZXJ5KFxuICAgICAgICBcIklOU0VSVCBJTlRPIGRhdGFfcHJlY2VwdGlvbiBTRVQgP1wiLFxuICAgICAgICBkYXRhLFxuICAgICAgICAoZXJyb3IsIHJlc3VsdCkgPT4ge1xuICAgICAgICAgIGlmICghZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnN0IG5ld1Jlc3VsdCA9IHtcbiAgICAgICAgICAgICAgaWQ6IHJlc3VsdC5pbnNlcnRJZCxcbiAgICAgICAgICAgICAgLi4uZGF0YSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXNvbHZlKG5ld1Jlc3VsdCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoYFNRTCA6ICR7ZXJyb3Iuc3FsTWVzc2FnZX1gKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICApO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgIGNvbnNvbGUubG9nKHF1ZXJ5LnNxbCk7XG4gICAgfSksXG5cbiAgICBnZXRFeHBvcnRQZGZCeUlkUmVrYW1tZWRpczogKGlkKSA9PlxuICAgIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGNvbm5lY3Rpb24ucXVlcnkoXG4gICAgICAgIFwiU0VMRUNUICogRlJPTSBkYXRhX3ByZWNlcHRpb24gV0hFUkUgaWQgPSA/XCIsXG4gICAgICAgIGlkLFxuICAgICAgICAoZXJyb3IsIHJlc3VsdHMpID0+IHtcbiAgICAgICAgICBpZiAoIWVycm9yKSB7XG4gICAgICAgICAgICByZXNvbHZlKHJlc3VsdHMpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZWplY3QobmV3IEVycm9yKGBNZXNzYWdlIDogJHtlcnJvci5tZXNzYWdlfWApKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfSksXG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxVQUFVLEdBQUdDLE9BQU8sQ0FBQyxvQkFBRCxDQUExQjs7QUFFQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0VBQ2ZDLGdCQUFnQixFQUFFLENBQUNDLEtBQUQsRUFBUUMsTUFBUixFQUFnQkMsTUFBaEIsRUFBd0JDLElBQXhCLEtBQ2hCLElBQUlDLE9BQUosQ0FBWSxDQUFDQyxPQUFELEVBQVVDLE1BQVYsS0FBcUI7SUFDL0JYLFVBQVUsQ0FBQ1ksS0FBWCxDQUNHLHdEQUF1REwsTUFBTyxlQUFjQyxJQUFLLG1CQURwRixFQUVFLENBQUNILEtBQUQsRUFBUUMsTUFBUixDQUZGLEVBR0UsQ0FBQ08sR0FBRCxFQUFNQyxNQUFOLEtBQWlCO01BQ2YsSUFBSSxDQUFDRCxHQUFMLEVBQVU7UUFDUkgsT0FBTyxDQUFDSSxNQUFELENBQVA7TUFDRCxDQUZELE1BRU87UUFDTEgsTUFBTSxDQUFDLElBQUlJLEtBQUosQ0FBVyxTQUFRRixHQUFHLENBQUNHLFVBQVcsRUFBbEMsQ0FBRCxDQUFOO01BQ0Q7SUFDRixDQVRIO0VBV0QsQ0FaRCxDQUZhO0VBZ0JiQyxrQkFBa0IsRUFBR1YsTUFBRCxJQUNwQixJQUFJRSxPQUFKLENBQVksQ0FBQ0MsT0FBRCxFQUFVQyxNQUFWLEtBQXFCO0lBQy9CWCxVQUFVLENBQUNZLEtBQVgsQ0FDRywwRUFBeUVMLE1BQU8sSUFEbkYsRUFFRSxDQUFDTSxHQUFELEVBQU1DLE1BQU4sS0FBaUI7TUFDZixJQUFJLENBQUNELEdBQUwsRUFBVTtRQUNSSCxPQUFPLENBQUNJLE1BQU0sQ0FBQyxDQUFELENBQU4sQ0FBVUksS0FBWCxDQUFQO01BQ0QsQ0FGRCxNQUVPO1FBQ0xQLE1BQU0sQ0FBQyxJQUFJSSxLQUFKLENBQVcsU0FBUUYsR0FBRyxDQUFDRyxVQUFXLEVBQWxDLENBQUQsQ0FBTjtNQUNEO0lBQ0YsQ0FSSDtFQVVELENBWEQsQ0FqQmE7RUE4QmJHLGNBQWMsRUFBR0MsSUFBRCxJQUNoQixJQUFJWCxPQUFKLENBQVksQ0FBQ0MsT0FBRCxFQUFVQyxNQUFWLEtBQXFCO0lBQy9CLE1BQU1DLEtBQUssR0FBR1osVUFBVSxDQUFDWSxLQUFYLENBQ1osbUNBRFksRUFFWlEsSUFGWSxFQUdaLENBQUNDLEtBQUQsRUFBUVAsTUFBUixLQUFtQjtNQUNqQixJQUFJLENBQUNPLEtBQUwsRUFBWTtRQUNWLE1BQU1DLFNBQVMsR0FBRztVQUNoQkMsRUFBRSxFQUFFVCxNQUFNLENBQUNVLFFBREs7VUFFaEIsR0FBR0o7UUFGYSxDQUFsQjtRQUlBVixPQUFPLENBQUNZLFNBQUQsQ0FBUDtNQUNELENBTkQsTUFNTztRQUNMWCxNQUFNLENBQUMsSUFBSUksS0FBSixDQUFXLFNBQVFNLEtBQUssQ0FBQ0wsVUFBVyxFQUFwQyxDQUFELENBQU47TUFDRDtJQUNGLENBYlcsQ0FBZCxDQUQrQixDQWdCL0I7O0lBQ0FTLE9BQU8sQ0FBQ0MsR0FBUixDQUFZZCxLQUFLLENBQUNlLEdBQWxCO0VBQ0QsQ0FsQkQsQ0EvQmE7RUFtRGJDLDBCQUEwQixFQUFHTCxFQUFELElBQzVCLElBQUlkLE9BQUosQ0FBWSxDQUFDQyxPQUFELEVBQVVDLE1BQVYsS0FBcUI7SUFDL0JYLFVBQVUsQ0FBQ1ksS0FBWCxDQUNFLDRDQURGLEVBRUVXLEVBRkYsRUFHRSxDQUFDRixLQUFELEVBQVFRLE9BQVIsS0FBb0I7TUFDbEIsSUFBSSxDQUFDUixLQUFMLEVBQVk7UUFDVlgsT0FBTyxDQUFDbUIsT0FBRCxDQUFQO01BQ0QsQ0FGRCxNQUVPO1FBQ0xsQixNQUFNLENBQUMsSUFBSUksS0FBSixDQUFXLGFBQVlNLEtBQUssQ0FBQ1MsT0FBUSxFQUFyQyxDQUFELENBQU47TUFDRDtJQUNGLENBVEg7RUFXRCxDQVpEO0FBcERhLENBQWpCIn0=