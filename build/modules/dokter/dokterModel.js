const connection = require("../../config/mysql");

module.exports = {
  getAllDokter: (limit, offset, search, sort) => new Promise((resolve, reject) => {
    connection.query(`SELECT * FROM data_dokter WHERE nama_dokter LIKE '%${search}%' ORDER BY ${sort} LIMIT ? OFFSET ?`, [limit, offset], (err, result) => {
      if (!err) {
        resolve(result);
      } else {
        reject(new Error(`SQL : ${err.sqlMessage}`));
      }
    });
  }),
  getCountDokter: search => new Promise((resolve, reject) => {
    connection.query(`SELECT COUNT(*) AS total FROM data_dokter WHERE nama_dokter LIKE '%${search}%'`, (err, result) => {
      if (!err) {
        resolve(result[0].total);
      } else {
        reject(new Error(`SQL : ${err.sqlMessage}`));
      }
    });
  }),
  postDokter: data => new Promise((resolve, reject) => {
    const query = connection.query("INSERT INTO data_dokter SET ?", data, (error, result) => {
      if (!error) {
        const newResult = {
          id: result.insertId,
          ...data
        };
        resolve(newResult);
      } else {
        reject(new Error(`SQL : ${error.sqlMessage}`));
      }
    }); // eslint-disable-next-line no-console

    console.log(query.sql);
  })
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb25uZWN0aW9uIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJnZXRBbGxEb2t0ZXIiLCJsaW1pdCIsIm9mZnNldCIsInNlYXJjaCIsInNvcnQiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsInF1ZXJ5IiwiZXJyIiwicmVzdWx0IiwiRXJyb3IiLCJzcWxNZXNzYWdlIiwiZ2V0Q291bnREb2t0ZXIiLCJ0b3RhbCIsInBvc3REb2t0ZXIiLCJkYXRhIiwiZXJyb3IiLCJuZXdSZXN1bHQiLCJpZCIsImluc2VydElkIiwiY29uc29sZSIsImxvZyIsInNxbCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9tb2R1bGVzL2Rva3Rlci9kb2t0ZXJNb2RlbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBjb25uZWN0aW9uID0gcmVxdWlyZShcIi4uLy4uL2NvbmZpZy9teXNxbFwiKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldEFsbERva3RlcjogKGxpbWl0LCBvZmZzZXQsIHNlYXJjaCwgc29ydCkgPT5cbiAgICBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25uZWN0aW9uLnF1ZXJ5KFxuICAgICAgICBgU0VMRUNUICogRlJPTSBkYXRhX2Rva3RlciBXSEVSRSBuYW1hX2Rva3RlciBMSUtFICclJHtzZWFyY2h9JScgT1JERVIgQlkgJHtzb3J0fSBMSU1JVCA/IE9GRlNFVCA/YCxcbiAgICAgICAgW2xpbWl0LCBvZmZzZXRdLFxuICAgICAgICAoZXJyLCByZXN1bHQpID0+IHtcbiAgICAgICAgICBpZiAoIWVycikge1xuICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZWplY3QobmV3IEVycm9yKGBTUUwgOiAke2Vyci5zcWxNZXNzYWdlfWApKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfSksXG5cbiAgZ2V0Q291bnREb2t0ZXI6IChzZWFyY2gpID0+XG4gICAgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgY29ubmVjdGlvbi5xdWVyeShcbiAgICAgICAgYFNFTEVDVCBDT1VOVCgqKSBBUyB0b3RhbCBGUk9NIGRhdGFfZG9rdGVyIFdIRVJFIG5hbWFfZG9rdGVyIExJS0UgJyUke3NlYXJjaH0lJ2AsXG4gICAgICAgIChlcnIsIHJlc3VsdCkgPT4ge1xuICAgICAgICAgIGlmICghZXJyKSB7XG4gICAgICAgICAgICByZXNvbHZlKHJlc3VsdFswXS50b3RhbCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoYFNRTCA6ICR7ZXJyLnNxbE1lc3NhZ2V9YCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9KSxcblxuICAgIHBvc3REb2t0ZXI6IChkYXRhKSA9PlxuICAgIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGNvbnN0IHF1ZXJ5ID0gY29ubmVjdGlvbi5xdWVyeShcbiAgICAgICAgXCJJTlNFUlQgSU5UTyBkYXRhX2Rva3RlciBTRVQgP1wiLFxuICAgICAgICBkYXRhLFxuICAgICAgICAoZXJyb3IsIHJlc3VsdCkgPT4ge1xuICAgICAgICAgIGlmICghZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnN0IG5ld1Jlc3VsdCA9IHtcbiAgICAgICAgICAgICAgaWQ6IHJlc3VsdC5pbnNlcnRJZCxcbiAgICAgICAgICAgICAgLi4uZGF0YSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXNvbHZlKG5ld1Jlc3VsdCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoYFNRTCA6ICR7ZXJyb3Iuc3FsTWVzc2FnZX1gKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICApO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgIGNvbnNvbGUubG9nKHF1ZXJ5LnNxbCk7XG4gICAgfSksXG5cbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBLE1BQU1BLFVBQVUsR0FBR0MsT0FBTyxDQUFDLG9CQUFELENBQTFCOztBQUVBQyxNQUFNLENBQUNDLE9BQVAsR0FBaUI7RUFDZkMsWUFBWSxFQUFFLENBQUNDLEtBQUQsRUFBUUMsTUFBUixFQUFnQkMsTUFBaEIsRUFBd0JDLElBQXhCLEtBQ1osSUFBSUMsT0FBSixDQUFZLENBQUNDLE9BQUQsRUFBVUMsTUFBVixLQUFxQjtJQUMvQlgsVUFBVSxDQUFDWSxLQUFYLENBQ0csc0RBQXFETCxNQUFPLGVBQWNDLElBQUssbUJBRGxGLEVBRUUsQ0FBQ0gsS0FBRCxFQUFRQyxNQUFSLENBRkYsRUFHRSxDQUFDTyxHQUFELEVBQU1DLE1BQU4sS0FBaUI7TUFDZixJQUFJLENBQUNELEdBQUwsRUFBVTtRQUNSSCxPQUFPLENBQUNJLE1BQUQsQ0FBUDtNQUNELENBRkQsTUFFTztRQUNMSCxNQUFNLENBQUMsSUFBSUksS0FBSixDQUFXLFNBQVFGLEdBQUcsQ0FBQ0csVUFBVyxFQUFsQyxDQUFELENBQU47TUFDRDtJQUNGLENBVEg7RUFXRCxDQVpELENBRmE7RUFnQmZDLGNBQWMsRUFBR1YsTUFBRCxJQUNkLElBQUlFLE9BQUosQ0FBWSxDQUFDQyxPQUFELEVBQVVDLE1BQVYsS0FBcUI7SUFDL0JYLFVBQVUsQ0FBQ1ksS0FBWCxDQUNHLHNFQUFxRUwsTUFBTyxJQUQvRSxFQUVFLENBQUNNLEdBQUQsRUFBTUMsTUFBTixLQUFpQjtNQUNmLElBQUksQ0FBQ0QsR0FBTCxFQUFVO1FBQ1JILE9BQU8sQ0FBQ0ksTUFBTSxDQUFDLENBQUQsQ0FBTixDQUFVSSxLQUFYLENBQVA7TUFDRCxDQUZELE1BRU87UUFDTFAsTUFBTSxDQUFDLElBQUlJLEtBQUosQ0FBVyxTQUFRRixHQUFHLENBQUNHLFVBQVcsRUFBbEMsQ0FBRCxDQUFOO01BQ0Q7SUFDRixDQVJIO0VBVUQsQ0FYRCxDQWpCYTtFQThCYkcsVUFBVSxFQUFHQyxJQUFELElBQ1osSUFBSVgsT0FBSixDQUFZLENBQUNDLE9BQUQsRUFBVUMsTUFBVixLQUFxQjtJQUMvQixNQUFNQyxLQUFLLEdBQUdaLFVBQVUsQ0FBQ1ksS0FBWCxDQUNaLCtCQURZLEVBRVpRLElBRlksRUFHWixDQUFDQyxLQUFELEVBQVFQLE1BQVIsS0FBbUI7TUFDakIsSUFBSSxDQUFDTyxLQUFMLEVBQVk7UUFDVixNQUFNQyxTQUFTLEdBQUc7VUFDaEJDLEVBQUUsRUFBRVQsTUFBTSxDQUFDVSxRQURLO1VBRWhCLEdBQUdKO1FBRmEsQ0FBbEI7UUFJQVYsT0FBTyxDQUFDWSxTQUFELENBQVA7TUFDRCxDQU5ELE1BTU87UUFDTFgsTUFBTSxDQUFDLElBQUlJLEtBQUosQ0FBVyxTQUFRTSxLQUFLLENBQUNMLFVBQVcsRUFBcEMsQ0FBRCxDQUFOO01BQ0Q7SUFDRixDQWJXLENBQWQsQ0FEK0IsQ0FnQi9COztJQUNBUyxPQUFPLENBQUNDLEdBQVIsQ0FBWWQsS0FBSyxDQUFDZSxHQUFsQjtFQUNELENBbEJEO0FBL0JhLENBQWpCIn0=