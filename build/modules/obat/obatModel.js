const connection = require("../../config/mysql");

module.exports = {
  getAllObat: (limit, offset, search, sort) => new Promise((resolve, reject) => {
    connection.query(`SELECT * FROM data_obat WHERE nama_obat LIKE '%${search}%' ORDER BY ${sort} LIMIT ? OFFSET ?`, [limit, offset], (err, result) => {
      if (!err) {
        resolve(result);
      } else {
        reject(new Error(`SQL : ${err.sqlMessage}`));
      }
    });
  }),
  getCountObat: search => new Promise((resolve, reject) => {
    connection.query(`SELECT COUNT(*) AS total FROM data_obat WHERE nama_obat LIKE '%${search}%'`, (err, result) => {
      if (!err) {
        resolve(result[0].total);
      } else {
        reject(new Error(`SQL : ${err.sqlMessage}`));
      }
    });
  }),
  postObat: data => new Promise((resolve, reject) => {
    const query = connection.query("INSERT INTO data_obat SET ?", data, (error, result) => {
      if (!error) {
        const newResult = {
          id: result.insertId,
          ...data
        };
        resolve(newResult);
      } else {
        reject(new Error(`SQL : ${error.sqlMessage}`));
      }
    }); // eslint-disable-next-line no-console

    console.log(query.sql);
  })
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb25uZWN0aW9uIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJnZXRBbGxPYmF0IiwibGltaXQiLCJvZmZzZXQiLCJzZWFyY2giLCJzb3J0IiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJxdWVyeSIsImVyciIsInJlc3VsdCIsIkVycm9yIiwic3FsTWVzc2FnZSIsImdldENvdW50T2JhdCIsInRvdGFsIiwicG9zdE9iYXQiLCJkYXRhIiwiZXJyb3IiLCJuZXdSZXN1bHQiLCJpZCIsImluc2VydElkIiwiY29uc29sZSIsImxvZyIsInNxbCJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9tb2R1bGVzL29iYXQvb2JhdE1vZGVsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGNvbm5lY3Rpb24gPSByZXF1aXJlKFwiLi4vLi4vY29uZmlnL215c3FsXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2V0QWxsT2JhdDogKGxpbWl0LCBvZmZzZXQsIHNlYXJjaCwgc29ydCkgPT5cbiAgICBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25uZWN0aW9uLnF1ZXJ5KFxuICAgICAgICBgU0VMRUNUICogRlJPTSBkYXRhX29iYXQgV0hFUkUgbmFtYV9vYmF0IExJS0UgJyUke3NlYXJjaH0lJyBPUkRFUiBCWSAke3NvcnR9IExJTUlUID8gT0ZGU0VUID9gLFxuICAgICAgICBbbGltaXQsIG9mZnNldF0sXG4gICAgICAgIChlcnIsIHJlc3VsdCkgPT4ge1xuICAgICAgICAgIGlmICghZXJyKSB7XG4gICAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoYFNRTCA6ICR7ZXJyLnNxbE1lc3NhZ2V9YCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9KSxcblxuICAgIGdldENvdW50T2JhdDogKHNlYXJjaCkgPT5cbiAgICBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25uZWN0aW9uLnF1ZXJ5KFxuICAgICAgICBgU0VMRUNUIENPVU5UKCopIEFTIHRvdGFsIEZST00gZGF0YV9vYmF0IFdIRVJFIG5hbWFfb2JhdCBMSUtFICclJHtzZWFyY2h9JSdgLFxuICAgICAgICAoZXJyLCByZXN1bHQpID0+IHtcbiAgICAgICAgICBpZiAoIWVycikge1xuICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHRbMF0udG90YWwpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZWplY3QobmV3IEVycm9yKGBTUUwgOiAke2Vyci5zcWxNZXNzYWdlfWApKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgfSksXG5cbiAgICBwb3N0T2JhdDogKGRhdGEpID0+XG4gICAgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgY29uc3QgcXVlcnkgPSBjb25uZWN0aW9uLnF1ZXJ5KFxuICAgICAgICBcIklOU0VSVCBJTlRPIGRhdGFfb2JhdCBTRVQgP1wiLFxuICAgICAgICBkYXRhLFxuICAgICAgICAoZXJyb3IsIHJlc3VsdCkgPT4ge1xuICAgICAgICAgIGlmICghZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnN0IG5ld1Jlc3VsdCA9IHtcbiAgICAgICAgICAgICAgaWQ6IHJlc3VsdC5pbnNlcnRJZCxcbiAgICAgICAgICAgICAgLi4uZGF0YSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXNvbHZlKG5ld1Jlc3VsdCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoYFNRTCA6ICR7ZXJyb3Iuc3FsTWVzc2FnZX1gKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICApO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgIGNvbnNvbGUubG9nKHF1ZXJ5LnNxbCk7XG4gICAgfSksXG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFNQSxVQUFVLEdBQUdDLE9BQU8sQ0FBQyxvQkFBRCxDQUExQjs7QUFFQUMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0VBQ2ZDLFVBQVUsRUFBRSxDQUFDQyxLQUFELEVBQVFDLE1BQVIsRUFBZ0JDLE1BQWhCLEVBQXdCQyxJQUF4QixLQUNWLElBQUlDLE9BQUosQ0FBWSxDQUFDQyxPQUFELEVBQVVDLE1BQVYsS0FBcUI7SUFDL0JYLFVBQVUsQ0FBQ1ksS0FBWCxDQUNHLGtEQUFpREwsTUFBTyxlQUFjQyxJQUFLLG1CQUQ5RSxFQUVFLENBQUNILEtBQUQsRUFBUUMsTUFBUixDQUZGLEVBR0UsQ0FBQ08sR0FBRCxFQUFNQyxNQUFOLEtBQWlCO01BQ2YsSUFBSSxDQUFDRCxHQUFMLEVBQVU7UUFDUkgsT0FBTyxDQUFDSSxNQUFELENBQVA7TUFDRCxDQUZELE1BRU87UUFDTEgsTUFBTSxDQUFDLElBQUlJLEtBQUosQ0FBVyxTQUFRRixHQUFHLENBQUNHLFVBQVcsRUFBbEMsQ0FBRCxDQUFOO01BQ0Q7SUFDRixDQVRIO0VBV0QsQ0FaRCxDQUZhO0VBZ0JiQyxZQUFZLEVBQUdWLE1BQUQsSUFDZCxJQUFJRSxPQUFKLENBQVksQ0FBQ0MsT0FBRCxFQUFVQyxNQUFWLEtBQXFCO0lBQy9CWCxVQUFVLENBQUNZLEtBQVgsQ0FDRyxrRUFBaUVMLE1BQU8sSUFEM0UsRUFFRSxDQUFDTSxHQUFELEVBQU1DLE1BQU4sS0FBaUI7TUFDZixJQUFJLENBQUNELEdBQUwsRUFBVTtRQUNSSCxPQUFPLENBQUNJLE1BQU0sQ0FBQyxDQUFELENBQU4sQ0FBVUksS0FBWCxDQUFQO01BQ0QsQ0FGRCxNQUVPO1FBQ0xQLE1BQU0sQ0FBQyxJQUFJSSxLQUFKLENBQVcsU0FBUUYsR0FBRyxDQUFDRyxVQUFXLEVBQWxDLENBQUQsQ0FBTjtNQUNEO0lBQ0YsQ0FSSDtFQVVELENBWEQsQ0FqQmE7RUE4QmJHLFFBQVEsRUFBR0MsSUFBRCxJQUNWLElBQUlYLE9BQUosQ0FBWSxDQUFDQyxPQUFELEVBQVVDLE1BQVYsS0FBcUI7SUFDL0IsTUFBTUMsS0FBSyxHQUFHWixVQUFVLENBQUNZLEtBQVgsQ0FDWiw2QkFEWSxFQUVaUSxJQUZZLEVBR1osQ0FBQ0MsS0FBRCxFQUFRUCxNQUFSLEtBQW1CO01BQ2pCLElBQUksQ0FBQ08sS0FBTCxFQUFZO1FBQ1YsTUFBTUMsU0FBUyxHQUFHO1VBQ2hCQyxFQUFFLEVBQUVULE1BQU0sQ0FBQ1UsUUFESztVQUVoQixHQUFHSjtRQUZhLENBQWxCO1FBSUFWLE9BQU8sQ0FBQ1ksU0FBRCxDQUFQO01BQ0QsQ0FORCxNQU1PO1FBQ0xYLE1BQU0sQ0FBQyxJQUFJSSxLQUFKLENBQVcsU0FBUU0sS0FBSyxDQUFDTCxVQUFXLEVBQXBDLENBQUQsQ0FBTjtNQUNEO0lBQ0YsQ0FiVyxDQUFkLENBRCtCLENBZ0IvQjs7SUFDQVMsT0FBTyxDQUFDQyxHQUFSLENBQVlkLEtBQUssQ0FBQ2UsR0FBbEI7RUFDRCxDQWxCRDtBQS9CYSxDQUFqQiJ9