const connection = require("../../config/mysql");

module.exports = {
  getAllAppointment: (limit, offset, search, sort) => new Promise((resolve, reject) => {
    connection.query(`SELECT * FROM data_appointment WHERE id_pasien LIKE '%${search}%' ORDER BY ${sort} LIMIT ? OFFSET ?`, [limit, offset], (err, result) => {
      if (!err) {
        resolve(result);
      } else {
        reject(new Error(`SQL : ${err.sqlMessage}`));
      }
    });
  }),
  getAppointmentByIdPasien: id => new Promise((resolve, reject) => {
    connection.query("SELECT * FROM data_appointment WHERE id_pasien = ?", id, (err, result) => {
      if (!err) {
        resolve(result);
      } else {
        reject(new Error(`SQL : ${err.sqlMessage}`));
      }
    });
  }),
  getAppointmentById: id => new Promise((resolve, reject) => {
    connection.query("SELECT * FROM data_appointment WHERE id = ?", id, (err, result) => {
      if (!err) {
        resolve(result);
      } else {
        reject(new Error(`SQL : ${err.sqlMessage}`));
      }
    });
  }),
  getCountAppointment: search => new Promise((resolve, reject) => {
    connection.query(`SELECT COUNT(*) AS total FROM data_appointment WHERE id_pasien LIKE '%${search}%'`, (err, result) => {
      if (!err) {
        resolve(result[0].total);
      } else {
        reject(new Error(`SQL : ${err.sqlMessage}`));
      }
    });
  }),
  postAppointment: data => new Promise((resolve, reject) => {
    const query = connection.query("INSERT INTO data_appointment SET ?", data, (error, result) => {
      if (!error) {
        const newResult = {
          id: result.insertId,
          ...data
        };
        resolve(newResult);
      } else {
        reject(new Error(`SQL : ${error.sqlMessage}`));
      }
    }); // eslint-disable-next-line no-console

    console.log(query.sql);
  }),
  updateAppointment: (data, id) => new Promise((resolve, reject) => {
    connection.query("UPDATE data_appointment SET ? WHERE id = ?", [data, id], error => {
      if (!error) {
        const newResult = {
          id,
          ...data
        };
        resolve(newResult);
      } else {
        reject(new Error(`SQL : ${error.sqlMessage}`));
      }
    });
  })
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb25uZWN0aW9uIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJnZXRBbGxBcHBvaW50bWVudCIsImxpbWl0Iiwib2Zmc2V0Iiwic2VhcmNoIiwic29ydCIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwicXVlcnkiLCJlcnIiLCJyZXN1bHQiLCJFcnJvciIsInNxbE1lc3NhZ2UiLCJnZXRBcHBvaW50bWVudEJ5SWRQYXNpZW4iLCJpZCIsImdldEFwcG9pbnRtZW50QnlJZCIsImdldENvdW50QXBwb2ludG1lbnQiLCJ0b3RhbCIsInBvc3RBcHBvaW50bWVudCIsImRhdGEiLCJlcnJvciIsIm5ld1Jlc3VsdCIsImluc2VydElkIiwiY29uc29sZSIsImxvZyIsInNxbCIsInVwZGF0ZUFwcG9pbnRtZW50Il0sInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL21vZHVsZXMvYXBwb2ludG1lbnQvYXBwb2ludG1lbnRNb2RlbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBjb25uZWN0aW9uID0gcmVxdWlyZShcIi4uLy4uL2NvbmZpZy9teXNxbFwiKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldEFsbEFwcG9pbnRtZW50OiAobGltaXQsIG9mZnNldCwgc2VhcmNoLCBzb3J0KSA9PlxuICAgIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGNvbm5lY3Rpb24ucXVlcnkoXG4gICAgICAgIGBTRUxFQ1QgKiBGUk9NIGRhdGFfYXBwb2ludG1lbnQgV0hFUkUgaWRfcGFzaWVuIExJS0UgJyUke3NlYXJjaH0lJyBPUkRFUiBCWSAke3NvcnR9IExJTUlUID8gT0ZGU0VUID9gLFxuICAgICAgICBbbGltaXQsIG9mZnNldF0sXG4gICAgICAgIChlcnIsIHJlc3VsdCkgPT4ge1xuICAgICAgICAgIGlmICghZXJyKSB7XG4gICAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoYFNRTCA6ICR7ZXJyLnNxbE1lc3NhZ2V9YCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9KSxcblxuICAgIGdldEFwcG9pbnRtZW50QnlJZFBhc2llbjogKGlkKSA9PlxuICAgIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGNvbm5lY3Rpb24ucXVlcnkoXG4gICAgICAgIFwiU0VMRUNUICogRlJPTSBkYXRhX2FwcG9pbnRtZW50IFdIRVJFIGlkX3Bhc2llbiA9ID9cIixcbiAgICAgICAgaWQsXG4gICAgICAgIChlcnIsIHJlc3VsdCkgPT4ge1xuICAgICAgICAgIGlmICghZXJyKSB7XG4gICAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoYFNRTCA6ICR7ZXJyLnNxbE1lc3NhZ2V9YCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9KSxcblxuICAgIGdldEFwcG9pbnRtZW50QnlJZDogKGlkKSA9PlxuICAgIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGNvbm5lY3Rpb24ucXVlcnkoXG4gICAgICAgIFwiU0VMRUNUICogRlJPTSBkYXRhX2FwcG9pbnRtZW50IFdIRVJFIGlkID0gP1wiLFxuICAgICAgICBpZCxcbiAgICAgICAgKGVyciwgcmVzdWx0KSA9PiB7XG4gICAgICAgICAgaWYgKCFlcnIpIHtcbiAgICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihgU1FMIDogJHtlcnIuc3FsTWVzc2FnZX1gKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICApO1xuICAgIH0pLFxuXG4gICAgZ2V0Q291bnRBcHBvaW50bWVudDogKHNlYXJjaCkgPT5cbiAgICBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25uZWN0aW9uLnF1ZXJ5KFxuICAgICAgICBgU0VMRUNUIENPVU5UKCopIEFTIHRvdGFsIEZST00gZGF0YV9hcHBvaW50bWVudCBXSEVSRSBpZF9wYXNpZW4gTElLRSAnJSR7c2VhcmNofSUnYCxcbiAgICAgICAgKGVyciwgcmVzdWx0KSA9PiB7XG4gICAgICAgICAgaWYgKCFlcnIpIHtcbiAgICAgICAgICAgIHJlc29sdmUocmVzdWx0WzBdLnRvdGFsKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihgU1FMIDogJHtlcnIuc3FsTWVzc2FnZX1gKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICApO1xuICAgIH0pLFxuXG4gICAgcG9zdEFwcG9pbnRtZW50OiAoZGF0YSkgPT5cbiAgICBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBjb25zdCBxdWVyeSA9IGNvbm5lY3Rpb24ucXVlcnkoXG4gICAgICAgIFwiSU5TRVJUIElOVE8gZGF0YV9hcHBvaW50bWVudCBTRVQgP1wiLFxuICAgICAgICBkYXRhLFxuICAgICAgICAoZXJyb3IsIHJlc3VsdCkgPT4ge1xuICAgICAgICAgIGlmICghZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnN0IG5ld1Jlc3VsdCA9IHtcbiAgICAgICAgICAgICAgaWQ6IHJlc3VsdC5pbnNlcnRJZCxcbiAgICAgICAgICAgICAgLi4uZGF0YSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICByZXNvbHZlKG5ld1Jlc3VsdCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlamVjdChuZXcgRXJyb3IoYFNRTCA6ICR7ZXJyb3Iuc3FsTWVzc2FnZX1gKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICApO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgIGNvbnNvbGUubG9nKHF1ZXJ5LnNxbCk7XG4gICAgfSksXG5cbiAgICB1cGRhdGVBcHBvaW50bWVudDogKGRhdGEsIGlkKSA9PlxuICAgIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGNvbm5lY3Rpb24ucXVlcnkoXG4gICAgICAgIFwiVVBEQVRFIGRhdGFfYXBwb2ludG1lbnQgU0VUID8gV0hFUkUgaWQgPSA/XCIsXG4gICAgICAgIFtkYXRhLCBpZF0sXG4gICAgICAgIChlcnJvcikgPT4ge1xuICAgICAgICAgIGlmICghZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnN0IG5ld1Jlc3VsdCA9IHtcbiAgICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICAgIC4uLmRhdGEsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgcmVzb2x2ZShuZXdSZXN1bHQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZWplY3QobmV3IEVycm9yKGBTUUwgOiAke2Vycm9yLnNxbE1lc3NhZ2V9YCkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9KSxcblxufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTUEsVUFBVSxHQUFHQyxPQUFPLENBQUMsb0JBQUQsQ0FBMUI7O0FBRUFDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQjtFQUNmQyxpQkFBaUIsRUFBRSxDQUFDQyxLQUFELEVBQVFDLE1BQVIsRUFBZ0JDLE1BQWhCLEVBQXdCQyxJQUF4QixLQUNqQixJQUFJQyxPQUFKLENBQVksQ0FBQ0MsT0FBRCxFQUFVQyxNQUFWLEtBQXFCO0lBQy9CWCxVQUFVLENBQUNZLEtBQVgsQ0FDRyx5REFBd0RMLE1BQU8sZUFBY0MsSUFBSyxtQkFEckYsRUFFRSxDQUFDSCxLQUFELEVBQVFDLE1BQVIsQ0FGRixFQUdFLENBQUNPLEdBQUQsRUFBTUMsTUFBTixLQUFpQjtNQUNmLElBQUksQ0FBQ0QsR0FBTCxFQUFVO1FBQ1JILE9BQU8sQ0FBQ0ksTUFB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