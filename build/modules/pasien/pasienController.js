/* eslint-disable guard-for-in */

/* eslint-disable no-restricted-syntax */
const pasienModel = require("./pasienModel");

const helperWrapper = require("../../helper/wrapper");

const {
  v4: uuidv4
} = require("uuid");

module.exports = {
  getAllPasien: async (req, res) => {
    try {
      let {
        page,
        limit,
        search,
        sort
      } = req.query;
      page = Number(page) || 1;
      limit = Number(limit) || 10;
      search = search || "";
      sort = sort || "nama_pasien ASC";
      let offset = page * limit - limit;
      const totalData = await pasienModel.getCountPasien(search);
      const totalPage = Math.ceil(totalData / limit);

      if (totalPage < page) {
        offset = 0;
        page = 1;
      }

      const pageInfo = {
        page,
        totalPage,
        limit,
        totalData
      };
      const result = await pasienModel.getAllPasien(limit, offset, search, sort);

      if (result.length < 1) {
        return helperWrapper.response(res, 200, `Data not found !`, []);
      }

      return helperWrapper.response(res, 200, "Success get data", result, pageInfo);
    } catch (error) {
      return helperWrapper.response(res, 400, `Bad request (${error.message})`, null);
    }
  },
  postPasien: async (req, res) => {
    try {
      const {
        kode_rm,
        nama_pasien,
        jenis_kelamin,
        umur,
        alamat,
        pengobatan,
        td,
        diagnosa,
        therapy,
        bagian
      } = req.body;
      const setData = {
        id: uuidv4(),
        kode_rm,
        nama_pasien,
        jenis_kelamin,
        umur,
        alamat,
        pengobatan,
        td,
        diagnosa,
        therapy,
        bagian
      };
      const result = await pasienModel.postPasien(setData);
      return helperWrapper.response(res, 200, "Succes create data", result);
    } catch (error) {
      return helperWrapper.response(res, 400, `bad request (${error.message})`, null);
    }
  } // getPasienById: async (req, res) => {
  //   try {
  //     const { id } = req.params;
  //     const result = await movieModel.getPasienById(id);
  //     if (result.length < 1) {
  //       return helperWrapper.response(
  //         res,
  //         404,
  //         `data by id ${id} not found !`,
  //         null
  //       );
  //     }
  //     // PROSES UNTUK MENYIMPAN DATA KE DALAM REDIS
  //     // =====
  //     redis.setex(`getPasien:${id}`, 3600, JSON.stringify(result));
  //     // ======
  //     return helperWrapper.response(res, 200, "succes get data by id", result);
  //   } catch (error) {
  //     return helperWrapper.response(
  //       res,
  //       400,
  //       `bad request (${error.message})`,
  //       null
  //     );
  //   }
  // },

};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJwYXNpZW5Nb2RlbCIsInJlcXVpcmUiLCJoZWxwZXJXcmFwcGVyIiwidjQiLCJ1dWlkdjQiLCJtb2R1bGUiLCJleHBvcnRzIiwiZ2V0QWxsUGFzaWVuIiwicmVxIiwicmVzIiwicGFnZSIsImxpbWl0Iiwic2VhcmNoIiwic29ydCIsInF1ZXJ5IiwiTnVtYmVyIiwib2Zmc2V0IiwidG90YWxEYXRhIiwiZ2V0Q291bnRQYXNpZW4iLCJ0b3RhbFBhZ2UiLCJNYXRoIiwiY2VpbCIsInBhZ2VJbmZvIiwicmVzdWx0IiwibGVuZ3RoIiwicmVzcG9uc2UiLCJlcnJvciIsIm1lc3NhZ2UiLCJwb3N0UGFzaWVuIiwia29kZV9ybSIsIm5hbWFfcGFzaWVuIiwiamVuaXNfa2VsYW1pbiIsInVtdXIiLCJhbGFtYXQiLCJwZW5nb2JhdGFuIiwidGQiLCJkaWFnbm9zYSIsInRoZXJhcHkiLCJiYWdpYW4iLCJib2R5Iiwic2V0RGF0YSIsImlkIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL21vZHVsZXMvcGFzaWVuL3Bhc2llbkNvbnRyb2xsZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgZ3VhcmQtZm9yLWluICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1yZXN0cmljdGVkLXN5bnRheCAqL1xuY29uc3QgcGFzaWVuTW9kZWwgPSByZXF1aXJlKFwiLi9wYXNpZW5Nb2RlbFwiKTtcbmNvbnN0IGhlbHBlcldyYXBwZXIgPSByZXF1aXJlKFwiLi4vLi4vaGVscGVyL3dyYXBwZXJcIik7XG5jb25zdCB7IHY0OiB1dWlkdjQgfSA9IHJlcXVpcmUoXCJ1dWlkXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZ2V0QWxsUGFzaWVuOiBhc3luYyAocmVxLCByZXMpID0+IHtcbiAgICB0cnkge1xuICAgICAgbGV0IHsgcGFnZSwgbGltaXQsIHNlYXJjaCwgc29ydCB9ID0gcmVxLnF1ZXJ5O1xuICAgICAgcGFnZSA9IE51bWJlcihwYWdlKSB8fCAxO1xuICAgICAgbGltaXQgPSBOdW1iZXIobGltaXQpIHx8IDEwO1xuICAgICAgc2VhcmNoID0gc2VhcmNoIHx8IFwiXCI7XG4gICAgICBzb3J0ID0gc29ydCB8fCBcIm5hbWFfcGFzaWVuIEFTQ1wiO1xuXG4gICAgICBsZXQgb2Zmc2V0ID0gcGFnZSAqIGxpbWl0IC0gbGltaXQ7XG4gICAgICBjb25zdCB0b3RhbERhdGEgPSBhd2FpdCBwYXNpZW5Nb2RlbC5nZXRDb3VudFBhc2llbihzZWFyY2gpO1xuICAgICAgY29uc3QgdG90YWxQYWdlID0gTWF0aC5jZWlsKHRvdGFsRGF0YSAvIGxpbWl0KTtcblxuICAgICAgaWYgKHRvdGFsUGFnZSA8IHBhZ2UpIHtcbiAgICAgICAgb2Zmc2V0ID0gMDtcbiAgICAgICAgcGFnZSA9IDE7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHBhZ2VJbmZvID0ge1xuICAgICAgICBwYWdlLFxuICAgICAgICB0b3RhbFBhZ2UsXG4gICAgICAgIGxpbWl0LFxuICAgICAgICB0b3RhbERhdGEsXG4gICAgICB9O1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBwYXNpZW5Nb2RlbC5nZXRBbGxQYXNpZW4oXG4gICAgICAgIGxpbWl0LFxuICAgICAgICBvZmZzZXQsXG4gICAgICAgIHNlYXJjaCxcbiAgICAgICAgc29ydFxuICAgICAgKTtcblxuICAgICAgaWYgKHJlc3VsdC5sZW5ndGggPCAxKSB7XG4gICAgICAgIHJldHVybiBoZWxwZXJXcmFwcGVyLnJlc3BvbnNlKHJlcywgMjAwLCBgRGF0YSBub3QgZm91bmQgIWAsIFtdKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGhlbHBlcldyYXBwZXIucmVzcG9uc2UoXG4gICAgICAgIHJlcyxcbiAgICAgICAgMjAwLFxuICAgICAgICBcIlN1Y2Nlc3MgZ2V0IGRhdGFcIixcbiAgICAgICAgcmVzdWx0LFxuICAgICAgICBwYWdlSW5mb1xuICAgICAgKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuIGhlbHBlcldyYXBwZXIucmVzcG9uc2UoXG4gICAgICAgIHJlcyxcbiAgICAgICAgNDAwLFxuICAgICAgICBgQmFkIHJlcXVlc3QgKCR7ZXJyb3IubWVzc2FnZX0pYCxcbiAgICAgICAgbnVsbFxuICAgICAgKTtcbiAgICB9XG4gIH0sXG5cbiAgcG9zdFBhc2llbjogYXN5bmMgKHJlcSwgcmVzKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAga29kZV9ybSxcbiAgICAgICAgbmFtYV9wYXNpZW4sXG4gICAgICAgIGplbmlzX2tlbGFtaW4sXG4gICAgICAgIHVtdXIsXG4gICAgICAgIGFsYW1hdCxcbiAgICAgICAgcGVuZ29iYXRhbixcbiAgICAgICAgdGQsXG4gICAgICAgIGRpYWdub3NhLFxuICAgICAgICB0aGVyYXB5LFxuICAgICAgICBiYWdpYW5cbiAgICAgIH0gPSByZXEuYm9keTtcbiAgICAgIGNvbnN0IHNldERhdGEgPSB7XG4gICAgICAgIGlkOiB1dWlkdjQoKSxcbiAgICAgICAga29kZV9ybSxcbiAgICAgICAgbmFtYV9wYXNpZW4sXG4gICAgICAgIGplbmlzX2tlbGFtaW4sXG4gICAgICAgIHVtdXIsXG4gICAgICAgIGFsYW1hdCxcbiAgICAgICAgcGVuZ29iYXRhbixcbiAgICAgICAgdGQsXG4gICAgICAgIGRpYWdub3NhLFxuICAgICAgICB0aGVyYXB5LFxuICAgICAgICBiYWdpYW5cbiAgICAgIH07XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBwYXNpZW5Nb2RlbC5wb3N0UGFzaWVuKHNldERhdGEpO1xuICAgICAgcmV0dXJuIGhlbHBlcldyYXBwZXIucmVzcG9uc2UocmVzLCAyMDAsIFwiU3VjY2VzIGNyZWF0ZSBkYXRhXCIsIHJlc3VsdCk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHJldHVybiBoZWxwZXJXcmFwcGVyLnJlc3BvbnNlKFxuICAgICAgICByZXMsXG4gICAgICAgIDQwMCxcbiAgICAgICAgYGJhZCByZXF1ZXN0ICgke2Vycm9yLm1lc3NhZ2V9KWAsXG4gICAgICAgIG51bGxcbiAgICAgICk7XG4gICAgfVxuICB9LFxuXG4gIC8vIGdldFBhc2llbkJ5SWQ6IGFzeW5jIChyZXEsIHJlcykgPT4ge1xuICAvLyAgIHRyeSB7XG4gIC8vICAgICBjb25zdCB7IGlkIH0gPSByZXEucGFyYW1zO1xuICAvLyAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgbW92aWVNb2RlbC5nZXRQYXNpZW5CeUlkKGlkKTtcbiAgLy8gICAgIGlmIChyZXN1bHQubGVuZ3RoIDwgMSkge1xuICAvLyAgICAgICByZXR1cm4gaGVscGVyV3JhcHBlci5yZXNwb25zZShcbiAgLy8gICAgICAgICByZXMsXG4gIC8vICAgICAgICAgNDA0LFxuICAvLyAgICAgICAgIGBkYXRhIGJ5IGlkICR7aWR9IG5vdCBmb3VuZCAhYCxcbiAgLy8gICAgICAgICBudWxsXG4gIC8vICAgICAgICk7XG4gIC8vICAgICB9XG4gIC8vICAgICAvLyBQUk9TRVMgVU5UVUsgTUVOWUlNUEFOIERBVEEgS0UgREFMQU0gUkVESVNcbiAgLy8gICAgIC8vID09PT09XG4gIC8vICAgICByZWRpcy5zZXRleChgZ2V0UGFzaWVuOiR7aWR9YCwgMzYwMCwgSlNPTi5zdHJpbmdpZnkocmVzdWx0KSk7XG4gIC8vICAgICAvLyA9PT09PT1cbiAgLy8gICAgIHJldHVybiBoZWxwZXJXcmFwcGVyLnJlc3BvbnNlKHJlcywgMjAwLCBcInN1Y2NlcyBnZXQgZGF0YSBieSBpZFwiLCByZXN1bHQpO1xuICAvLyAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gIC8vICAgICByZXR1cm4gaGVscGVyV3JhcHBlci5yZXNwb25zZShcbiAgLy8gICAgICAgcmVzLFxuICAvLyAgICAgICA0MDAsXG4gIC8vICAgICAgIGBiYWQgcmVxdWVzdCAoJHtlcnJvci5tZXNzYWdlfSlgLFxuICAvLyAgICAgICBudWxsXG4gIC8vICAgICApO1xuICAvLyAgIH1cbiAgLy8gfSxcblxufTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBQ0E7QUFDQSxN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